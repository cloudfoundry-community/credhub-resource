// Code generated by counterfeiter. DO NOT EDIT.
package credhubfakes

import (
	"sync"

	"code.cloudfoundry.org/credhub-cli/credhub/credentials"
	"github.com/cloudfoundry-community/credhub-resource/credhub"
)

type FakeCredHub struct {
	FindByPathStub        func(string) (credentials.FindResults, error)
	findByPathMutex       sync.RWMutex
	findByPathArgsForCall []struct {
		arg1 string
	}
	findByPathReturns struct {
		result1 credentials.FindResults
		result2 error
	}
	findByPathReturnsOnCall map[int]struct {
		result1 credentials.FindResults
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredHub) FindByPath(arg1 string) (credentials.FindResults, error) {
	fake.findByPathMutex.Lock()
	ret, specificReturn := fake.findByPathReturnsOnCall[len(fake.findByPathArgsForCall)]
	fake.findByPathArgsForCall = append(fake.findByPathArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindByPath", []interface{}{arg1})
	fake.findByPathMutex.Unlock()
	if fake.FindByPathStub != nil {
		return fake.FindByPathStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findByPathReturns.result1, fake.findByPathReturns.result2
}

func (fake *FakeCredHub) FindByPathCallCount() int {
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	return len(fake.findByPathArgsForCall)
}

func (fake *FakeCredHub) FindByPathArgsForCall(i int) string {
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	return fake.findByPathArgsForCall[i].arg1
}

func (fake *FakeCredHub) FindByPathReturns(result1 credentials.FindResults, result2 error) {
	fake.FindByPathStub = nil
	fake.findByPathReturns = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHub) FindByPathReturnsOnCall(i int, result1 credentials.FindResults, result2 error) {
	fake.FindByPathStub = nil
	if fake.findByPathReturnsOnCall == nil {
		fake.findByPathReturnsOnCall = make(map[int]struct {
			result1 credentials.FindResults
			result2 error
		})
	}
	fake.findByPathReturnsOnCall[i] = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredHub) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredHub) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ credhub.CredHub = new(FakeCredHub)
